name: DAST - Nuclei, OWASP Zap and Lighthouse CI

on:
  pull_request:
    branches:
      - main

jobs:
  dast-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code ⬇
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      - name: Install dependencies
        run: npm ci

      - name: Setup database
        run: |
          npm run services:up 
          npm run services:wait:database 
          npm run migrations:up

      - name: Start application in development mode
        run: |
          npx next dev &
          echo $! > .pid
          echo "⏳ Waiting for application to start..."
          npx wait-on http://localhost:3000 -t 60000
          curl -s http://localhost:3000 > /dev/null && echo "✅ Application is running!"

      - name: Nuclei Security Scan
        uses: projectdiscovery/nuclei-action@main
        with:
          target: http://localhost:3000
          templates: "cves/,vulnerabilities/,exposed-panels/,technologies/"
          output: nuclei-report.txt

      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.14.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          target: "http://localhost:3000"
          rules_file_name: ".zap/rules.tsv"
          cmd_options: "-a"
          issue_title: "ZAP Scan Report"
          artifact_name: "zap-scan-report"
          allow_issue_writing: false

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v12
        with:
          urls: |
            http://localhost:3000
            http://localhost:3000/status
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            nuclei-report.txt
            **/zap-report.*
            .lighthouseci/

      - name: Stop application and services
        if: always()
        run: |
          if [ -f .pid ]; then
            kill $(cat .pid) || true
          fi
          npm run services:down || true
